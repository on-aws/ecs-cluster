Description: >
  This template deploys an ECS cluster to the provided VPC and subnets
  using an EC2 SpotFleet

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Optional tags. The metadata that you apply to the resources.
        Parameters:
          - App
          - Owner

Parameters:
  App:
    Type: String

  Owner:
    Type: String

  AvailabilityZonesCount:
    Description: Number of availability zones to span.
    Default: 2
    Type: Number
    AllowedValues: [ 1, 2, 3 ]

  VPC:
    Description: Choose existing VPC
    Type: AWS::EC2::VPC::Id

  PrivateSubnets:
    Description: Choose which subnets this ECS cluster should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

Conditions:
  SecondZone:
    Fn::Or:
      - Fn::Equals: [!Ref AvailabilityZonesCount, 2]
      - Fn::Equals: [!Ref AvailabilityZonesCount, 3]
  ThirdZone:
    Fn::Equals: [!Ref AvailabilityZonesCount, 3]
  AssignApp:
    Fn::Not:
      - Fn::Equals: [ !Ref App, "" ]
  AssignOwner:
    Fn::Not:
      - Fn::Equals: [ !Ref Owner, "" ]

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  ################################################################################
  # Cluster Security
  ################################################################################
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Group for ECS Instances
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue
        - Key: Name
          Value: on-aws-ecs-instances


  # This IAM Role is attached to all of the ECS hosts. It is based on the default role
  # published here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
  #
  # You can add other IAM policy statements here to allow access from your ECS hosts
  # to other AWS services. Please note that this role will be used by ALL containers
  # running on the ECS host.
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                    "Service": "ec2.amazonaws.com"
                }
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-ecs-instance
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetAuthorizationToken
                Resource: '*'
        - PolicyName: !Sub ${AWS::StackName}-rexray
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AttachVolume
                  - ec2:CreateVolume
                  - ec2:CreateSnapshot
                  - ec2:CreateTags
                  - ec2:DeleteVolume
                  - ec2:DeleteSnapshot
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeInstances
                  - ec2:DescribeVolumes
                  - ec2:DescribeVolumeAttribute
                  - ec2:DescribeVolumeStatus
                  - ec2:DescribeSnapshots
                  - ec2:CopySnapshot
                  - ec2:DescribeSnapshotAttribute
                  - ec2:DetachVolume
                  - ec2:ModifySnapshotAttribute
                  - ec2:ModifyVolumeAttribute
                  - ec2:DescribeTags
                Resource: '*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  UserDataHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref ImageId
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref SecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Fn::If:
                - AssignApp
                - Key: App
                  Value: !Ref App
                - !Ref AWS::NoValue
              - Fn::If:
                - AssignOwner
                - Key: Owner
                  Value: !Ref Owner
                - !Ref AWS::NoValue
              - Key: Name
                Value: on-aws-ecs-instance
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash
              yum update -y
              yum install -y aws-cfn-bootstrap
              docker plugin install rexray/ebs REXRAY_PREEMPT=true EBS_REGION=${AWS::Region} --grant-all-permissions
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --region ${AWS::Region}
              /opt/aws/bin/cfn-signal '${UserDataHandle}'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            02_enable_ecs_container_metadata:
              command: echo ECS_ENABLE_CONTAINER_METADATA=true >> /etc/ecs/ecs.config

  SpotFleetA:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-ec2-spot-fleet-tagging-role
        SpotPrice: 0.1
        TargetCapacity: 1
        AllocationStrategy: capacityOptimized
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: r5a.large
                SubnetId: !Select [ 0, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: r5.large
                SubnetId: !Select [ 0, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3a.large
                SubnetId: !Select [ 0, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3.large
                SubnetId: !Select [ 0, !Ref PrivateSubnets ]

  SpotFleetB:
    Type: AWS::EC2::SpotFleet
    Condition: SecondZone
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-ec2-spot-fleet-tagging-role
        SpotPrice: 0.1
        TargetCapacity: 1
        AllocationStrategy: capacityOptimized
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: r5a.large
                SubnetId: !Select [ 1, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: r5.large
                SubnetId: !Select [ 1, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3a.large
                SubnetId: !Select [ 1, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3.large
                SubnetId: !Select [ 1, !Ref PrivateSubnets ]

  SpotFleetC:
    Type: AWS::EC2::SpotFleet
    Condition: ThirdZone
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-ec2-spot-fleet-tagging-role
        SpotPrice: 0.1
        TargetCapacity: 1
        AllocationStrategy: capacityOptimized
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: r5a.large
                SubnetId: !Select [ 2, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: r5.large
                SubnetId: !Select [ 2, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3a.large
                SubnetId: !Select [ 2, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3.large
                SubnetId: !Select [ 2, !Ref PrivateSubnets ]

  WaitUserData:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: LaunchTemplate
    Properties:
      Handle: !Ref UserDataHandle
      Timeout: 600
      Count: !Ref AvailabilityZonesCount

Outputs:
  Cluster:
    Value: !Ref ECSCluster

  SecurityGroup:
    Value: !Ref SecurityGroup
