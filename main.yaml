Description: >
  This template deploys an ECS cluster to the provided VPC and subnets
  using an EC2 SpotFleet

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Optional tags. The metadata that you apply to the resources.
        Parameters:
          - App
          - Owner

Parameters:
  App:
    Type: String

  Owner:
    Type: String

  VolumeSize:
    Description: Persistent storage (EBS Volume) size.
    Type: Number
    Default: 125

  VolumeType:
    Description: Persistent storage (EBS Volume) size.
    Type: String
    Default: st1
    AllowedValues:
      - st1
      - gp3
      - io2

  AvailabilityZonesCount:
    Description: Number of availability zones to span.
    Default: 2
    Type: Number
    AllowedValues: [ 1, 2, 3 ]

  VPC:
    Description: Choose existing VPC
    Type: AWS::EC2::VPC::Id

  PrivateSubnets:
    Description: Choose which subnets this ECS cluster should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

Conditions:
  SecondZone:
    Fn::Or:
      - Fn::Equals: [!Ref AvailabilityZonesCount, 2]
      - Fn::Equals: [!Ref AvailabilityZonesCount, 3]
  ThirdZone:
    Fn::Equals: [!Ref AvailabilityZonesCount, 3]
  AssignApp:
    Fn::Not:
      - Fn::Equals: [ !Ref App, "" ]
  AssignOwner:
    Fn::Not:
      - Fn::Equals: [ !Ref Owner, "" ]

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  ################################################################################
  # Cluster Persistence
  ################################################################################
  VolumeA:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref VolumeSize
      VolumeType: !Ref VolumeType
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue
        - Key: Name
          Value: on-aws-volume-a
    DeletionPolicy: Snapshot

  VolumeB:
    Type: AWS::EC2::Volume
    Condition: SecondZone
    Properties:
      Size: !Ref VolumeSize
      VolumeType: !Ref VolumeType
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue
        - Key: Name
          Value: on-aws-volume-b

  VolumeC:
    Type: AWS::EC2::Volume
    Condition: ThirdZone
    Properties:
      Size: !Ref VolumeSize
      VolumeType: !Ref VolumeType
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue
        - Key: Name
          Value: on-aws-volume-c

  ################################################################################
  # Cluster Security
  ################################################################################
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Group for ECS Instances
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue
        - Key: Name
          Value: on-aws-ecs-instances


  # This IAM Role is attached to all of the ECS hosts. It is based on the default role
  # published here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
  #
  # You can add other IAM policy statements here to allow access from your ECS hosts
  # to other AWS services. Please note that this role will be used by ALL containers
  # running on the ECS host.
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                    "Service": "ec2.amazonaws.com"
                }
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: !Ref AWS::StackName
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AttachVolume
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetAuthorizationToken
                Resource: '*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  UserDataHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref ImageId
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref SecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Fn::If:
                - AssignApp
                - Key: App
                  Value: !Ref App
                - !Ref AWS::NoValue
              - Fn::If:
                - AssignOwner
                - Key: Owner
                  Value: !Ref Owner
                - !Ref AWS::NoValue
              - Key: Name
                Value: on-aws-ecs-instance
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash
              yum update -y
              yum install -y aws-cfn-bootstrap
              export instance=`curl http://169.254.169.254/latest/meta-data/instance-id`
              export az=`curl http://169.254.169.254/latest/meta-data/placement/availability-zone`
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --region ${AWS::Region}
              /opt/aws/bin/cfn-signal '${UserDataHandle}'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              unzip: []
          commands:
            00_install_aws_cli:
              command: |
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                ./aws/install
            01_attach_ebs_volume_a:
              command:
                Fn::Sub:
                  - |
                    if [[ $az == '${AZ}' ]]
                    then
                      aws ec2 attach-volume --region ${AWS::Region} \
                        --volume-id ${VolumeA} \
                        --instance-id $instance \
                        --device /dev/sdf
                    fi
                  -
                    AZ: !Select [ 0, !GetAZs '' ]
            02_attach_ebs_volume_b:
              command:
                Fn::If:
                  - SecondZone
                  - Fn::Sub:
                    - |
                      if [[ $az == '${AZ}' ]]
                      then
                        aws ec2 attach-volume --region ${AWS::Region} \
                          --volume-id ${VolumeB} \
                          --instance-id $instance \
                          --device /dev/sdf
                      fi
                    -
                      AZ: !Select [ 1, !GetAZs '' ]
                  - echo 'SKIP'
            03_attach_ebs_volume_c:
              command:
                Fn::If:
                  - ThirdZone
                  - Fn::Sub:
                    - |
                      if [[ $az == '${AZ}' ]]
                      then
                        aws ec2 attach-volume --region ${AWS::Region} \
                          --volume-id ${VolumeC} \
                          --instance-id $instance \
                          --device /dev/sdf
                      fi
                    -
                      AZ: !Select [ 2, !GetAZs '' ]
                  - echo 'SKIP'
            04_wait_ebs_volume_attached:
              command: while [ "$(file -sL /dev/sdf | grep -q 'cannot open' || echo 'yes')" != 'yes' ]; do sleep 10; done
            05_format_volume_if_needed:
              command: file -sL /dev/sdf | grep -q 'XFS' || mkfs -t xfs /dev/sdf
            06_mount_volume:
              command: mkdir /on-aws && mount /dev/sdf /on-aws
            07_add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

  SpotFleetA:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-ec2-spot-fleet-tagging-role
        SpotPrice: 0.1
        TargetCapacity: 1
        AllocationStrategy: capacityOptimized
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: r5a.large
                SubnetId: !Select [ 0, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: r5.large
                SubnetId: !Select [ 0, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3a.large
                SubnetId: !Select [ 0, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3.large
                SubnetId: !Select [ 0, !Ref PrivateSubnets ]

  SpotFleetB:
    Type: AWS::EC2::SpotFleet
    Condition: SecondZone
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-ec2-spot-fleet-tagging-role
        SpotPrice: 0.1
        TargetCapacity: 1
        AllocationStrategy: capacityOptimized
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: r5a.large
                SubnetId: !Select [ 1, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: r5.large
                SubnetId: !Select [ 1, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3a.large
                SubnetId: !Select [ 1, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3.large
                SubnetId: !Select [ 1, !Ref PrivateSubnets ]

  SpotFleetC:
    Type: AWS::EC2::SpotFleet
    Condition: ThirdZone
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-ec2-spot-fleet-tagging-role
        SpotPrice: 0.1
        TargetCapacity: 1
        AllocationStrategy: capacityOptimized
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: r5a.large
                SubnetId: !Select [ 2, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: r5.large
                SubnetId: !Select [ 2, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3a.large
                SubnetId: !Select [ 2, !Ref PrivateSubnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3.large
                SubnetId: !Select [ 2, !Ref PrivateSubnets ]

  WaitUserData:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: LaunchTemplate
    Properties:
      Handle: !Ref UserDataHandle
      Timeout: 600
      Count: !Ref AvailabilityZonesCount

Outputs:
  Cluster:
    Value: !Ref ECSCluster

  SecurityGroup:
    Value: !Ref SecurityGroup
